#pragma once

#include <cstdint>
#include <string>

#include "options.hpp"
#include "status.hpp"

namespace rcmp {

using GAddr = uintptr_t;
constexpr static GAddr GNullPtr = 0;

/**
 * @brief Memory Pool Client Context
 */
class PoolContext;

/**
 * @brief
 * Opens the memory pool. Returns a pointer to the memory pool context on success, otherwise returns
 * `nullptr`. The return object is generated by the new operation and should be closed and deleted
 * by `Close()`.
 *
 * @param options Memory Pool Initialisation Options
 * @return PoolContext*
 */
PoolContext *Open(ClientOptions options);

/**
 * @brief Closing the Memory Pool Context
 *
 * @param pool_ctx
 */
void Close(PoolContext *pool_ctx);

class PoolContext {
   private:
    /**
     * @brief `PoolContext` internal implementation
     */
    class PoolContextImpl;

   public:
    PoolContext(ClientOptions options);
    ~PoolContext();

    /**
     * @brief Memory request. The memory request policy allocates memory according to the proximity
     * of the cabinet where the client is located. A failed request returns `GNullPtr`.
     *
     * @param size
     * @return GAddr
     */
    GAddr Alloc(size_t size);
    /**
     * @brief Read `gaddr` address, size `size` into `buf`.
     *
     * @param gaddr
     * @param size
     * @param buf
     * @return Status
     */
    Status Read(GAddr gaddr, size_t size, void *buf);
    /**
     * @brief Write data from `buf` to `gaddr` address, size `size`.
     *
     * @param gaddr
     * @param size
     * @param buf
     * @return Status
     */
    Status Write(GAddr gaddr, size_t size, const void *buf);
    /**
     * @brief Free memory
     *
     * @param gaddr
     * @param size
     * @return Status
     */
    Status Free(GAddr gaddr, size_t size);

    /**
     * @brief Allocate contiguous memory pages. The memory request policy is allocated according to
     * the proximity of the cabinet where the client is located. A failed request returns
     * `GNullPtr`.
     *
     * @param size
     * @return GAddr
     */
    GAddr AllocPage(size_t count);

    /**
     * @brief Free consecutive memory pages.
     *
     * @param gaddr
     * @return Status
     */
    Status FreePage(GAddr gaddr, size_t count);

    /**
     * @brief CAS 8byte-aligned addr
     *
     * @param gaddr
     * @param expected
     * @param desired
     * @param ret
     * @return Status
     */
    Status CAS(GAddr gaddr, uint64_t &expected, uint64_t desired, bool &ret);

    // /**
    //  * @brief Write data from `buf` to `gaddr` address, size `size`.
    //  *
    //  * @param gaddr
    //  * @param size
    //  * @param buf
    //  * @return Status
    //  */
    // Status WriteBatch(GAddr gaddr, size_t size, void *buf);

    const ClientOptions &GetOptions() const;

    /*********************** for test ***********************/

    void __DumpStats();

    void __ClearStats();

    Status __TestDataSend1(int *array, size_t size);

    Status __TestDataSend2(int *array, size_t size);

    Status __NotifyPerf();

    Status __StopPerf();

   private:
    PoolContextImpl *m_impl;
};

}  // namespace rcmp